# TARS Multi-Agent System - API Documentation

## Overview

This document outlines the API structure for the TARS Multi-Agent System, including the request and response payload formats. The API is implemented as a Next.js API route at `/api/optimization`.

## API Endpoint

```
POST /api/optimization
```

## Request Format

### Headers

```
Content-Type: application/json
```

### Request Body

The request body is a simple JSON object containing the user's query:

```json
{
  "query": string
}
```

### Parameters

| Parameter | Type   | Required | Description                                          |
|-----------|--------|----------|------------------------------------------------------|
| query     | string | Yes      | User input message describing the business process or optimization request |

### Example Request

```json
{
  "query": "Analyze and optimize our manufacturing supply chain process"
}
```

## Response Format

### Headers

```
Content-Type: application/json
```

### Response Body

The response is a comprehensive JSON object containing:
1. Analysis data (business flow, analytics, news and impact)
2. Recommendations (optimization options)
3. A chat response message

```json
{
  "analysis": {
    "businessFlow": {
      "nodes": Array<Node>,
      "edges": Array<Edge>
    },
    "analytics": AnalyticsData,
    "newsAndImpact": {
      "newsItems": Array<NewsItem>,
      "impactItems": Array<ImpactItem>
    }
  },
  "recommendations": {
    "options": Array<Option>
  },
  "chatResponse": string
}
```

### Data Types

#### Node
```typescript
{
  id: string;
  label: string;
  type?: string;          // "start", "process", "end", etc.
  position?: {
    x: number;
    y: number;
  };
  data?: any;             // Additional node data
}
```

#### Edge
```typescript
{
  id: string;
  source: string;         // ID of source node
  target: string;         // ID of target node
  label?: string;
  type?: string;
  data?: any;             // Additional edge data
}
```

#### AnalyticsData
```typescript
{
  currentAnnualCost: number;
  efficiencyRating: number;
  averageProcessTime: number;
  riskAssessment: number;
  trends: {
    costTrend: "increasing" | "decreasing" | "stable";
    efficiencyTrend: "improving" | "worsening" | "stable";
    timeTrend: "increasing" | "decreasing" | "stable";
    riskTrend: "improving" | "worsening" | "stable";
  }
}
```

#### NewsItem
```typescript
{
  id: string;
  title: string;
  date: string;
  impact: "positive" | "negative" | "neutral";
  description: string;
}
```

#### ImpactItem
```typescript
{
  id: string;
  title: string;
  description: string;
  probability: number;    // 0-100
  impact: number;         // 0-100
}
```

#### Option (Enhanced)
```typescript
{
  id: string;
  title: string;
  description: string;
  timeToImplement: string;
  costReduction: string;
  additionalMetrics?: Array<{
    label: string;
    value: string;
  }>;
  nodes: Array<Node>;
  edges: Array<Edge>;
  financialImpact: Array<FinancialImpact>;
  implementationPlan: Array<ImplementationTask>;
}
```

#### FinancialImpact
```typescript
{
  metricName: string;
  current: number;
  projected: number;
  change: number;         // Percentage change
  unit: string;           // "$", "%", "days", etc.
}
```

#### ImplementationTask
```typescript
{
  id: string;
  department: string;
  task: string;
  duration: string;
  status: "pending" | "in-progress" | "completed";
}
```

### Example Response

```json
{
  "analysis": {
    "businessFlow": {
      "nodes": [
        { "id": "node-1", "label": "Raw Materials Intake", "type": "start", "position": { "x": 50, "y": 100 } },
        { "id": "node-2", "label": "Quality Control", "type": "process", "position": { "x": 200, "y": 50 } },
        { "id": "node-3", "label": "Production Line A", "type": "process", "position": { "x": 350, "y": 100 } },
        { "id": "node-4", "label": "Production Line B", "type": "process", "position": { "x": 350, "y": 200 } },
        { "id": "node-5", "label": "Assembly", "type": "process", "position": { "x": 500, "y": 150 } },
        { "id": "node-6", "label": "Packaging", "type": "process", "position": { "x": 650, "y": 100 } },
        { "id": "node-7", "label": "Warehouse", "type": "end", "position": { "x": 800, "y": 150 } }
      ],
      "edges": [
        { "id": "edge-1", "source": "node-1", "target": "node-2", "label": "Inspection" },
        { "id": "edge-2", "source": "node-2", "target": "node-3", "label": "Passed QC - High Priority" },
        { "id": "edge-3", "source": "node-2", "target": "node-4", "label": "Passed QC - Standard" },
        { "id": "edge-4", "source": "node-3", "target": "node-5", "label": "Component A" },
        { "id": "edge-5", "source": "node-4", "target": "node-5", "label": "Component B" },
        { "id": "edge-6", "source": "node-5", "target": "node-6", "label": "Assembled Product" },
        { "id": "edge-7", "source": "node-6", "target": "node-7", "label": "Finished Goods" }
      ]
    },
    "analytics": {
      "currentAnnualCost": 8750000,
      "efficiencyRating": 73,
      "averageProcessTime": 14.5,
      "riskAssessment": 63,
      "trends": {
        "costTrend": "increasing",
        "efficiencyTrend": "stable",
        "timeTrend": "increasing",
        "riskTrend": "worsening"
      }
    },
    "newsAndImpact": {
      "newsItems": [
        {
          "id": "news-1",
          "title": "New Tariff Regulations",
          "date": "April 15, 2025",
          "impact": "negative",
          "description": "New tariffs of 25% imposed on key materials affecting Production Line B."
        },
        {
          "id": "news-2",
          "title": "Competitor Restructuring",
          "date": "April 10, 2025",
          "impact": "positive",
          "description": "Main competitor implementing similar restructuring with 9-month timeline."
        }
      ],
      "impactItems": [
        {
          "id": "impact-1",
          "title": "Supply Chain Disruption",
          "description": "Potential delays in raw material sourcing affecting production timeline",
          "probability": 68,
          "impact": 72
        },
        {
          "id": "impact-2",
          "title": "Market Share Growth",
          "description": "Optimization could lead to 15% increase in market share within 12 months",
          "probability": 75,
          "impact": 85
        }
      ]
    }
  },
  "recommendations": {
    "options": [
      {
        "id": "option-1",
        "title": "Process Automation Strategy",
        "description": "Implement AI-driven automation in the manufacturing workflow, optimizing the connection between Quality Control and Assembly.",
        "timeToImplement": "3-4 months",
        "costReduction": "22% cost reduction",
        "additionalMetrics": [
          {
            "label": "ROI",
            "value": "134% in 12 months"
          },
          {
            "label": "Risk Reduction",
            "value": "42%"
          }
        ],
        "nodes": [
          { "id": "node-1", "label": "Raw Materials Intake", "type": "start", "position": { "x": 50, "y": 100 } },
          { "id": "node-2", "label": "Automated Quality Control", "type": "process", "position": { "x": 200, "y": 100 } },
          { "id": "node-3", "label": "Smart Production Line", "type": "process", "position": { "x": 400, "y": 100 } },
          { "id": "node-5", "label": "Automated Assembly", "type": "process", "position": { "x": 550, "y": 100 } },
          { "id": "node-6", "label": "Packaging", "type": "process", "position": { "x": 700, "y": 100 } },
          { "id": "node-7", "label": "Warehouse", "type": "end", "position": { "x": 850, "y": 100 } }
        ],
        "edges": [
          { "id": "edge-1", "source": "node-1", "target": "node-2", "label": "AI Sorting" },
          { "id": "edge-2", "source": "node-2", "target": "node-3", "label": "Real-time Optimization" },
          { "id": "edge-4", "source": "node-3", "target": "node-5", "label": "Smart Routing" },
          { "id": "edge-6", "source": "node-5", "target": "node-6", "label": "Assembled Product" },
          { "id": "edge-7", "source": "node-6", "target": "node-7", "label": "Finished Goods" }
        ],
        "financialImpact": [
          {
            "metricName": "Annual Operating Costs",
            "current": 8750000,
            "projected": 6825000,
            "change": -22,
            "unit": "$"
          },
          {
            "metricName": "Process Time",
            "current": 14.5,
            "projected": 8.7,
            "change": -40,
            "unit": "days"
          }
        ],
        "implementationPlan": [
          {
            "id": "task-1-1",
            "department": "IT",
            "task": "Setup automation infrastructure",
            "duration": "4 weeks",
            "status": "pending"
          },
          {
            "id": "task-1-2",
            "department": "Operations",
            "task": "Process automation integration",
            "duration": "6 weeks",
            "status": "pending"
          }
        ]
      }
    ]
  },
  "chatResponse": "I've analyzed your request about \"Analyze and optimize our manufacturing supply chain process\" and generated optimization options. You can review the detailed business flow analysis, along with two alternative optimization strategies: Process Automation Strategy (22% cost reduction) and Supply Chain Restructuring (18% cost reduction). Each option includes financial impacts and an implementation plan."
}
```

## Error Responses

### Status Codes

- **200 OK**: Request successful
- **400 Bad Request**: Invalid request format or missing required parameters
- **500 Internal Server Error**: Server-side error while processing the request

### Error Response Format

```json
{
  "error": string
}
```

### Example Error Response

```json
{
  "error": "Failed to process optimization request"
}
```

## Implementation Notes

1. The API is implemented as a Next.js API route at `src/app/api/optimization/route.ts`
2. In a production environment, this API would:
   - Connect to AI services for analyzing the user query
   - Retrieve real-time business data from databases
   - Generate custom optimization options based on the specific query
   - Use machine learning models for projections and impact analysis
3. The current implementation uses static mock data to demonstrate the structure

## API Types

The TypeScript interfaces for these API types are defined in `src/lib/api.ts` and can be imported and used throughout the application for type safety.